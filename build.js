/**\n * üèóÔ∏è BUILD SCRIPT\n * \n * Script de construcci√≥n para compilar TypeScript a JavaScript\n * Compatible con el entorno actual sin Vite\n */\n\nconst fs = require('fs');\nconst path = require('path');\nconst { execSync } = require('child_process');\n\n// Configuraci√≥n\nconst config = {\n    srcDir: 'resources/ts',\n    outDir: 'public/dist/js',\n    entryPoints: [\n        'resources/ts/app.ts',\n        'resources/ts/htmx-config.ts'\n    ]\n};\n\n/**\n * Crea directorios si no existen\n */\nfunction ensureDirectoryExists(dirPath) {\n    if (!fs.existsSync(dirPath)) {\n        fs.mkdirSync(dirPath, { recursive: true });\n        console.log(`üìÅ Created directory: ${dirPath}`);\n    }\n}\n\n/**\n * Compila TypeScript\n */\nfunction compileTypeScript() {\n    console.log('üî® Compiling TypeScript...');\n    \n    try {\n        // Compilar TypeScript\n        execSync('npx tsc', { stdio: 'inherit' });\n        console.log('‚úÖ TypeScript compilation completed');\n    } catch (error) {\n        console.error('‚ùå TypeScript compilation failed:', error.message);\n        process.exit(1);\n    }\n}\n\n/**\n * Copia archivos adicionales\n */\nfunction copyAssets() {\n    console.log('üìã Copying additional assets...');\n    \n    // Crear directorio de salida\n    ensureDirectoryExists(config.outDir);\n    \n    // Aqu√≠ podr√≠as copiar otros archivos si es necesario\n    console.log('‚úÖ Assets copied');\n}\n\n/**\n * Minifica archivos para producci√≥n\n */\nfunction minifyForProduction() {\n    if (process.env.NODE_ENV === 'production') {\n        console.log('üóúÔ∏è Minifying for production...');\n        \n        try {\n            // Minificar archivos JavaScript\n            execSync(`npx terser ${config.outDir}/**/*.js -o ${config.outDir}/app.min.js --source-map`, { stdio: 'inherit' });\n            console.log('‚úÖ Minification completed');\n        } catch (error) {\n            console.error('‚ùå Minification failed:', error.message);\n        }\n    }\n}\n\n/**\n * Funci√≥n principal de build\n */\nfunction build() {\n    console.log('üöÄ Starting build process...');\n    \n    // Verificar que existe tsconfig.json\n    if (!fs.existsSync('tsconfig.json')) {\n        console.error('‚ùå tsconfig.json not found');\n        process.exit(1);\n    }\n    \n    // Ejecutar pasos del build\n    compileTypeScript();\n    copyAssets();\n    minifyForProduction();\n    \n    console.log('üéâ Build completed successfully!');\n}\n\n/**\n * Funci√≥n de watch para desarrollo\n */\nfunction watch() {\n    console.log('üëÄ Starting watch mode...');\n    \n    try {\n        execSync('npx tsc --watch', { stdio: 'inherit' });\n    } catch (error) {\n        console.error('‚ùå Watch mode failed:', error.message);\n        process.exit(1);\n    }\n}\n\n// Ejecutar seg√∫n el comando\nconst command = process.argv[2];\n\nswitch (command) {\n    case 'watch':\n    case 'dev':\n        watch();\n        break;\n    case 'build':\n    case 'prod':\n        process.env.NODE_ENV = 'production';\n        build();\n        break;\n    default:\n        build();\n        break;\n}\n\nmodule.exports = { build, watch };"