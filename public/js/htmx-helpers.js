/**\n * üîß HELPERS PARA HTMX\n * \n * Funciones auxiliares para mejorar la experiencia con HTMX\n */\n\n/**\n * Toggle r√°pido de favoritos\n */\nfunction toggleQuickFavorite(productId, button) {\n    const icon = button.querySelector('i');\n    const isFavorite = icon.classList.contains('bi-heart-fill');\n    \n    // Cambiar icono inmediatamente para feedback visual\n    if (isFavorite) {\n        icon.classList.remove('bi-heart-fill');\n        icon.classList.add('bi-heart');\n        button.classList.remove('btn-danger');\n        button.classList.add('btn-outline-secondary');\n    } else {\n        icon.classList.remove('bi-heart');\n        icon.classList.add('bi-heart-fill');\n        button.classList.remove('btn-outline-secondary');\n        button.classList.add('btn-danger');\n    }\n    \n    // Simular llamada a API (aqu√≠ podr√≠as hacer una petici√≥n real)\n    console.log(`Producto ${productId} ${isFavorite ? 'eliminado de' : 'agregado a'} favoritos`);\n    \n    // Mostrar notificaci√≥n\n    showQuickNotification(\n        isFavorite ? 'üíî Eliminado de favoritos' : '‚ù§Ô∏è Agregado a favoritos',\n        isFavorite ? 'info' : 'success'\n    );\n}\n\n/**\n * Muestra una notificaci√≥n r√°pida\n */\nfunction showQuickNotification(message, type = 'info') {\n    // Crear notificaci√≥n\n    const notification = document.createElement('div');\n    notification.className = `notification notification-${type} notification-show`;\n    notification.innerHTML = `\n        <div class=\"notification-content\">\n            <span class=\"notification-message\">${message}</span>\n            <button class=\"notification-close\" onclick=\"this.parentElement.parentElement.remove()\">√ó</button>\n        </div>\n    `;\n    \n    // Obtener o crear contenedor\n    let container = document.getElementById('htmx-notifications');\n    if (!container) {\n        container = document.createElement('div');\n        container.id = 'htmx-notifications';\n        container.className = 'htmx-notifications-container';\n        document.body.appendChild(container);\n    }\n    \n    // Agregar notificaci√≥n\n    container.appendChild(notification);\n    \n    // Auto-remover despu√©s de 3 segundos\n    setTimeout(() => {\n        if (notification.parentNode) {\n            notification.classList.add('notification-hide');\n            setTimeout(() => {\n                if (notification.parentNode) {\n                    notification.remove();\n                }\n            }, 300);\n        }\n    }, 3000);\n}\n\n/**\n * Inicializaci√≥n de helpers HTMX\n */\ndocument.addEventListener('DOMContentLoaded', function() {\n    // Configurar eventos globales HTMX\n    document.addEventListener('htmx:afterRequest', function(event) {\n        const xhr = event.detail.xhr;\n        const target = event.detail.target;\n        \n        // Manejar respuestas de agregar al carrito\n        if (xhr.responseURL && xhr.responseURL.includes('/carrito/agregar')) {\n            if (xhr.status === 200) {\n                try {\n                    const response = JSON.parse(xhr.responseText);\n                    if (response.success) {\n                        showQuickNotification('‚úÖ ' + (response.mensaje || 'Producto agregado al carrito'), 'success');\n                        \n                        // Actualizar badge del carrito si existe\n                        updateCartBadge();\n                        \n                        // Emitir evento para componentes Alpine\n                        document.dispatchEvent(new CustomEvent('cart:updated'));\n                    } else {\n                        showQuickNotification('‚ùå ' + (response.mensaje || 'Error al agregar producto'), 'error');\n                    }\n                } catch (e) {\n                    showQuickNotification('‚úÖ Producto agregado al carrito', 'success');\n                }\n            } else {\n                showQuickNotification('‚ùå Error al agregar producto', 'error');\n            }\n        }\n    });\n    \n    // Manejar errores de red\n    document.addEventListener('htmx:sendError', function(event) {\n        showQuickNotification('‚ùå Error de conexi√≥n', 'error');\n    });\n    \n    // Manejar timeouts\n    document.addEventListener('htmx:timeout', function(event) {\n        showQuickNotification('‚è±Ô∏è La solicitud tard√≥ demasiado tiempo', 'warning');\n    });\n});\n\n/**\n * Actualiza el badge del carrito\n */\nasync function updateCartBadge() {\n    try {\n        const response = await fetch('/api/carrito/contar');\n        const data = await response.json();\n        \n        // Actualizar badges existentes\n        const badges = document.querySelectorAll('.floating-cart-badge, #navCartBadge');\n        badges.forEach(badge => {\n            badge.textContent = data.total_items || 0;\n            \n            if (data.total_items === 0) {\n                badge.classList.add('empty');\n            } else {\n                badge.classList.remove('empty');\n            }\n        });\n        \n        // Actualizar bot√≥n flotante\n        const floatingButton = document.querySelector('.floating-cart-button');\n        if (floatingButton) {\n            if (data.total_items > 0) {\n                floatingButton.classList.add('has-items');\n            } else {\n                floatingButton.classList.remove('has-items');\n            }\n        }\n        \n    } catch (error) {\n        console.error('Error updating cart badge:', error);\n    }\n}\n\n/**\n * Funci√≥n para manejar el scroll suave en carousels\n */\nfunction smoothScrollCarousel(container, direction) {\n    const scrollAmount = container.clientWidth * 0.8;\n    const currentScroll = container.scrollLeft;\n    const targetScroll = direction === 'next' \n        ? currentScroll + scrollAmount \n        : currentScroll - scrollAmount;\n    \n    container.scrollTo({\n        left: targetScroll,\n        behavior: 'smooth'\n    });\n}\n\n// Hacer funciones disponibles globalmente\nwindow.toggleQuickFavorite = toggleQuickFavorite;\nwindow.showQuickNotification = showQuickNotification;\nwindow.updateCartBadge = updateCartBadge;\nwindow.smoothScrollCarousel = smoothScrollCarousel;"