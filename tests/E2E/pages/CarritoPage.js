/**
 * üõí CARRITO PAGE OBJECT MODEL
 * 
 * Page Object que encapsula todas las interacciones con el carrito de compras.
 * Implementa el patr√≥n Page Object Model para mantener las pruebas mantenibles
 * y reutilizables.
 * 
 * RESPONSABILIDADES:
 * - Encapsular selectores y acciones del carrito
 * - Proporcionar m√©todos de alto nivel para las pruebas
 * - Manejar esperas y validaciones espec√≠ficas del carrito
 * - Abstraer la complejidad de la interfaz de usuario
 * 
 * @author Rock Store Testing Team
 * @version 1.0.0
 */

class CarritoPage {
    /**
     * üèóÔ∏è CONSTRUCTOR - Inicializa la p√°gina del carrito
     * 
     * @param {import('@playwright/test').Page} page - Instancia de p√°gina de Playwright
     */
    constructor(page) {
        this.page = page;
        
        // üéØ SELECTORES PRINCIPALES
        this.selectors = {
            // Carrito flotante
            carritoFlotante: '[data-testid="carrito-flotante"], .position-fixed .bg-primary',
            badgeCarrito: '#cartBadge, [data-testid="cart-badge"]',
            
            // P√°gina del carrito
            tituloCarrito: 'h2:has-text("Tu Carrito Musical")',
            carritoVacio: 'text=Tu carrito est√° vac√≠o',
            explorarCatalogo: 'text=Explorar Cat√°logo Musical',
            
            // Items del carrito
            itemCarrito: '.cart-item',
            nombreProducto: '.cart-item h6',
            precioUnitario: '.cart-item .text-primary',
            inputCantidad: '.qty-input',
            btnIncrementar: '.qty-btn[data-action="increment"]',
            btnDecrementar: '.qty-btn[data-action="decrement"]',
            btnEliminar: '.remove-item',
            subtotalItem: '.subtotal',
            
            // Resumen del pedido
            resumenPedido: '.card:has-text("Resumen del Pedido")',
            subtotalGeneral: '#subtotalAmount',
            impuestos: '#taxAmount',
            totalGeneral: '#totalAmount',
            totalItems: '#totalAlbums',
            productosUnicos: '#uniqueProducts',
            
            // Botones de acci√≥n
            btnVaciarCarrito: '#clearCartBtn',
            btnVerificar: '#verifyCartBtn',
            btnCheckout: '#checkoutBtn',
            btnSeguirComprando: 'text=Seguir Comprando',
            
            // Mensajes
            mensajes: '#cartMessages .alert',
            mensajeExito: '.alert-success',
            mensajeError: '.alert-danger',
            mensajeAdvertencia: '.alert-warning'
        };
    }

    /**
     * üöÄ NAVEGAR AL CARRITO
     * 
     * Navega directamente a la p√°gina del carrito.
     * √ötil para pruebas que necesitan empezar desde el carrito.
     */
    async navegarAlCarrito() {
        await this.page.goto('/carrito');
        await this.page.waitForLoadState('networkidle');
    }

    /**
     * üñ±Ô∏è HACER CLIC EN CARRITO FLOTANTE
     * 
     * Hace clic en el bot√≥n flotante del carrito para navegar a la p√°gina.
     * Simula el comportamiento real del usuario.
     */
    async hacerClicCarritoFlotante() {
        await this.page.click(this.selectors.carritoFlotante);
        await this.page.waitForURL('**/carrito');
    }

    /**
     * üìä OBTENER BADGE DEL CARRITO
     * 
     * Obtiene el n√∫mero mostrado en el badge del carrito flotante.
     * 
     * @returns {Promise<number>} N√∫mero de items en el badge
     */
    async obtenerBadgeCarrito() {
        const badge = this.page.locator(this.selectors.badgeCarrito);
        const isVisible = await badge.isVisible();
        
        if (!isVisible) return 0;
        
        const texto = await badge.textContent();
        return parseInt(texto) || 0;
    }

    /**
     * ‚ùì VERIFICAR SI CARRITO EST√Å VAC√çO
     * 
     * Verifica si el carrito muestra el estado vac√≠o.
     * 
     * @returns {Promise<boolean>} True si el carrito est√° vac√≠o
     */
    async estaCarritoVacio() {
        return await this.page.locator(this.selectors.carritoVacio).isVisible();
    }

    /**
     * üìã OBTENER ITEMS DEL CARRITO
     * 
     * Obtiene informaci√≥n de todos los items en el carrito.
     * 
     * @returns {Promise<Array>} Array con informaci√≥n de cada item
     */
    async obtenerItemsCarrito() {
        const items = await this.page.locator(this.selectors.itemCarrito).all();
        const itemsInfo = [];

        for (const item of items) {
            const productId = await item.getAttribute('data-product-id');
            const nombre = await item.locator('h6').textContent();
            const precio = await item.locator('.text-primary').textContent();
            const cantidad = await item.locator('.qty-input').inputValue();
            const subtotal = await item.locator('.subtotal').textContent();

            itemsInfo.push({
                id: productId,
                nombre: nombre?.trim(),
                precio: precio?.trim(),
                cantidad: parseInt(cantidad),
                subtotal: subtotal?.trim()
            });
        }

        return itemsInfo;
    }

    /**
     * ‚ûï INCREMENTAR CANTIDAD
     * 
     * Incrementa la cantidad de un producto espec√≠fico.
     * 
     * @param {string} productId - ID del producto
     */
    async incrementarCantidad(productId) {
        const btn = this.page.locator(`${this.selectors.btnIncrementar}[data-product-id="${productId}"]`);
        await btn.click();
        await this.page.waitForTimeout(500); // Esperar actualizaci√≥n AJAX
    }

    /**
     * ‚ûñ DECREMENTAR CANTIDAD
     * 
     * Decrementa la cantidad de un producto espec√≠fico.
     * 
     * @param {string} productId - ID del producto
     */
    async decrementarCantidad(productId) {
        const btn = this.page.locator(`${this.selectors.btnDecrementar}[data-product-id="${productId}"]`);
        await btn.click();
        await this.page.waitForTimeout(500); // Esperar actualizaci√≥n AJAX
    }

    /**
     * üî¢ CAMBIAR CANTIDAD DIRECTAMENTE
     * 
     * Cambia la cantidad escribiendo directamente en el input.
     * 
     * @param {string} productId - ID del producto
     * @param {number} cantidad - Nueva cantidad
     */
    async cambiarCantidad(productId, cantidad) {
        const input = this.page.locator(`${this.selectors.inputCantidad}[data-product-id="${productId}"]`);
        await input.fill(cantidad.toString());
        await input.blur(); // Trigger change event
        await this.page.waitForTimeout(500); // Esperar actualizaci√≥n AJAX
    }

    /**
     * üóëÔ∏è ELIMINAR PRODUCTO
     * 
     * Elimina un producto espec√≠fico del carrito.
     * 
     * @param {string} productId - ID del producto a eliminar
     */
    async eliminarProducto(productId) {
        const btn = this.page.locator(`${this.selectors.btnEliminar}[data-product-id="${productId}"]`);
        
        // Manejar el di√°logo de confirmaci√≥n
        this.page.on('dialog', async dialog => {
            await dialog.accept();
        });
        
        await btn.click();
        await this.page.waitForTimeout(1000); // Esperar eliminaci√≥n
    }

    /**
     * üßπ VACIAR CARRITO COMPLETO
     * 
     * Vac√≠a completamente el carrito usando el bot√≥n correspondiente.
     */
    async vaciarCarrito() {
        // Manejar el di√°logo de confirmaci√≥n
        this.page.on('dialog', async dialog => {
            await dialog.accept();
        });
        
        await this.page.click(this.selectors.btnVaciarCarrito);
        await this.page.waitForLoadState('networkidle');
    }

    /**
     * üîç VERIFICAR CARRITO
     * 
     * Hace clic en el bot√≥n de verificar disponibilidad.
     */
    async verificarCarrito() {
        await this.page.click(this.selectors.btnVerificar);
        await this.page.waitForTimeout(1000); // Esperar verificaci√≥n
    }

    /**
     * üí∞ OBTENER TOTALES DEL CARRITO
     * 
     * Obtiene todos los totales mostrados en el resumen.
     * 
     * @returns {Promise<Object>} Objeto con todos los totales
     */
    async obtenerTotales() {
        const subtotal = await this.page.locator(this.selectors.subtotalGeneral).textContent();
        const impuestos = await this.page.locator(this.selectors.impuestos).textContent();
        const total = await this.page.locator(this.selectors.totalGeneral).textContent();
        const totalItems = await this.page.locator(this.selectors.totalItems).textContent();
        const productosUnicos = await this.page.locator(this.selectors.productosUnicos).textContent();

        return {
            subtotal: subtotal?.trim(),
            impuestos: impuestos?.trim(),
            total: total?.trim(),
            totalItems: parseInt(totalItems) || 0,
            productosUnicos: parseInt(productosUnicos) || 0
        };
    }

    /**
     * üì± OBTENER √öLTIMO MENSAJE
     * 
     * Obtiene el √∫ltimo mensaje mostrado al usuario.
     * 
     * @returns {Promise<string|null>} Texto del mensaje o null si no hay
     */
    async obtenerUltimoMensaje() {
        const mensajes = this.page.locator(this.selectors.mensajes);
        const count = await mensajes.count();
        
        if (count === 0) return null;
        
        const ultimoMensaje = mensajes.nth(count - 1);
        return await ultimoMensaje.textContent();
    }

    /**
     * ‚úÖ ESPERAR MENSAJE DE √âXITO
     * 
     * Espera a que aparezca un mensaje de √©xito espec√≠fico.
     * 
     * @param {string} textoEsperado - Texto esperado en el mensaje
     */
    async esperarMensajeExito(textoEsperado) {
        await this.page.waitForSelector(this.selectors.mensajeExito, { timeout: 5000 });
        const mensaje = await this.page.locator(this.selectors.mensajeExito).textContent();
        return mensaje?.includes(textoEsperado);
    }

    /**
     * üõçÔ∏è IR AL CHECKOUT
     * 
     * Hace clic en el bot√≥n de proceder al pago.
     */
    async irAlCheckout() {
        await this.page.click(this.selectors.btnCheckout);
    }

    /**
     * üîô SEGUIR COMPRANDO
     * 
     * Hace clic en el bot√≥n de seguir comprando.
     */
    async seguirComprando() {
        await this.page.click(this.selectors.btnSeguirComprando);
        await this.page.waitForURL('**/');
    }

    /**
     * üîÑ ESPERAR ACTUALIZACI√ìN AJAX
     * 
     * Espera a que se complete una operaci√≥n AJAX del carrito.
     * 
     * @param {number} timeout - Tiempo m√°ximo de espera en ms
     */
    async esperarActualizacionAjax(timeout = 2000) {
        await this.page.waitForTimeout(timeout);
        await this.page.waitForLoadState('networkidle');
    }
}

module.exports = CarritoPage;